// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/iam/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/iam/client.go -destination=mocks/mock_iam_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/abhishekghoshhh/gms/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// FetchClientCredentialToken mocks base method.
func (m *MockClient) FetchClientCredentialToken() (*model.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchClientCredentialToken")
	ret0, _ := ret[0].(*model.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchClientCredentialToken indicates an expected call of FetchClientCredentialToken.
func (mr *MockClientMockRecorder) FetchClientCredentialToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchClientCredentialToken", reflect.TypeOf((*MockClient)(nil).FetchClientCredentialToken))
}

// FetchUserById mocks base method.
func (m *MockClient) FetchUserById(token, userId string) (*model.IamProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserById", token, userId)
	ret0, _ := ret[0].(*model.IamProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserById indicates an expected call of FetchUserById.
func (mr *MockClientMockRecorder) FetchUserById(token, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserById", reflect.TypeOf((*MockClient)(nil).FetchUserById), token, userId)
}

// FetchUserInfo mocks base method.
func (m *MockClient) FetchUserInfo(token string) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserInfo", token)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserInfo indicates an expected call of FetchUserInfo.
func (mr *MockClientMockRecorder) FetchUserInfo(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserInfo", reflect.TypeOf((*MockClient)(nil).FetchUserInfo), token)
}
