// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/lib/build_capabilities.go
//
// Generated by this command:
//
//	mockgen -source=pkg/lib/build_capabilities.go -destination=mocks/mock_build_capabilities.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCapabilityBuilder is a mock of CapabilityBuilder interface.
type MockCapabilityBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCapabilityBuilderMockRecorder
}

// MockCapabilityBuilderMockRecorder is the mock recorder for MockCapabilityBuilder.
type MockCapabilityBuilderMockRecorder struct {
	mock *MockCapabilityBuilder
}

// NewMockCapabilityBuilder creates a new mock instance.
func NewMockCapabilityBuilder(ctrl *gomock.Controller) *MockCapabilityBuilder {
	mock := &MockCapabilityBuilder{ctrl: ctrl}
	mock.recorder = &MockCapabilityBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapabilityBuilder) EXPECT() *MockCapabilityBuilderMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockCapabilityBuilder) Capabilities() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(string)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockCapabilityBuilderMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockCapabilityBuilder)(nil).Capabilities))
}
