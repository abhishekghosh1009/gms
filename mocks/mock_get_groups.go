// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/lib/get_groups.go
//
// Generated by this command:
//
//	mockgen -source=pkg/lib/get_groups.go -destination=mocks/mock_get_groups.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/abhishekghoshhh/gms/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockGmsFlow is a mock of GmsFlow interface.
type MockGmsFlow struct {
	ctrl     *gomock.Controller
	recorder *MockGmsFlowMockRecorder
}

// MockGmsFlowMockRecorder is the mock recorder for MockGmsFlow.
type MockGmsFlowMockRecorder struct {
	mock *MockGmsFlow
}

// NewMockGmsFlow creates a new mock instance.
func NewMockGmsFlow(ctrl *gomock.Controller) *MockGmsFlow {
	mock := &MockGmsFlow{ctrl: ctrl}
	mock.recorder = &MockGmsFlowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGmsFlow) EXPECT() *MockGmsFlowMockRecorder {
	return m.recorder
}

// GetGroups mocks base method.
func (m *MockGmsFlow) GetGroups(gmsModel *model.GmsModel) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", gmsModel)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockGmsFlowMockRecorder) GetGroups(gmsModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockGmsFlow)(nil).GetGroups), gmsModel)
}
